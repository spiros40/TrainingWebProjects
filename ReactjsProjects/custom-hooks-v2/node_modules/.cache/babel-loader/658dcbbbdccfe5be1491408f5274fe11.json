{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n/*requestConfig is an object and contains connection informations*/\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      /*runs the function here but the code is at component\n      in that way we can have different logic*/\n\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["/home/lubuntu/Desktop/Programming/TrainingWebProjects/ReactjsProjects/custom-hooks-v2/src/hooks/use-http.jsx"],"sourcesContent":["import { useState } from \"react\";\n\n/*requestConfig is an object and contains connection informations*/\nconst useHttp=(requestConfig, applyData)=>{\n    const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const sendRequest = async (taskText) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        requestConfig.url,{\n            method:requestConfig.method ? requestConfig.method:\"GET\",\n            headers:requestConfig.headers ? requestConfig.headers: {},\n            body:requestConfig.body ? JSON.stringify(requestConfig.body) : null\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      /*runs the function here but the code is at component\n      in that way we can have different logic*/\n      applyData(data);\n      \n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  };\n  return {\n    isLoading:isLoading,\n    error:error,\n    sendRequest:sendRequest\n  };\n}\n\nexport default useHttp;"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA;;AACA,MAAMC,OAAO,GAAC,CAACC,aAAD,EAAgBC,SAAhB,KAA4B;EAAA;;EACtC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;EACF,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;EAEA,MAAMQ,WAAW,GAAG,MAAOC,QAAP,IAAoB;IACtCJ,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR;;IACA,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BT,aAAa,CAACU,GADY,EACR;QACdC,MAAM,EAACX,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA4C,KADrC;QAEdC,OAAO,EAACZ,aAAa,CAACY,OAAd,GAAwBZ,aAAa,CAACY,OAAtC,GAA+C,EAFzC;QAGdC,IAAI,EAACb,aAAa,CAACa,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CAArB,GAA0D;MAHjD,CADQ,CAA5B;;MAQA,IAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;MACA;AACN;;MACMlB,SAAS,CAACiB,IAAD,CAAT;IAED,CAlBD,CAkBE,OAAOE,GAAP,EAAY;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;IACD;;IACDlB,YAAY,CAAC,KAAD,CAAZ;EACD,CAzBD;;EA0BA,OAAO;IACLD,SAAS,EAACA,SADL;IAELE,KAAK,EAACA,KAFD;IAGLE,WAAW,EAACA;EAHP,CAAP;AAKD,CAnCD;;GAAMP,O;;AAqCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}